{"version":3,"sources":["logo.svg","components/Nav.jsx","components/BeerItem.jsx","components/BeerList.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","styles","nav","backgroundColor","flexGrow","Nav","react_default","a","createElement","Navbar_default","style","expand","Component","BeerList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","beers","breweries","_this2","fetch","then","r","json","data","setState","map","item","result","filter","brewery","id","brewery_id","name","columns","Header","accessor","filterMethod","row","includes","value","Filter","_ref","onChange","type","max","min","event","target","width","es","filterable","defaultPageSize","className","App","components_Nav","Container_default","marginTop","Row_default","Col_default","md","components_BeerList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gNCGlCC,EAAS,CACXC,IAAM,CACFC,gBAAiB,UACjBC,SAAU,IAWHC,EAPH,WACV,OACEC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,MAAOT,EAAOC,IAAKS,OAAO,MAChCL,EAAAC,EAAAC,cAAA,8BCViBI,mBC4FRC,qBArFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,GACPC,UAAW,IAJIT,mFAQC,IAAAU,EAAAP,KAElBQ,MAAM,uBACHC,KAAK,SAAAC,GAAC,OAAIA,EAAEC,SACZF,KAAK,SAAAG,GACJL,EAAKM,SAAS,CAAEP,UAAWM,MAG/BJ,MAAM,mBACHC,KAAK,SAAAC,GAAC,OAAIA,EAAEC,SACZF,KAAK,SAAAG,GACJA,EAAKE,IAAI,SAAAC,GAGP,IAAIC,EAAST,EAAKH,MAAME,UAAUW,OAAO,SAAAC,GACvC,OAAOA,EAAQC,KAAOJ,EAAKK,aAC1B,GAEW,MAAVJ,IACFD,EAAI,aAAmBC,EAAOK,QAIlCd,EAAKM,SAAS,CAAER,MAAOO,uCAM3B,IAAMU,EAAU,CACd,CACEC,OAAQ,KACRC,SAAU,MAEZ,CACED,OAAQ,OACRC,SAAU,OACVC,aAAc,SAACR,EAAQS,GAAT,OAAiBA,EAAIT,EAAOE,IAAIQ,SAASV,EAAOW,SAEhE,CACEL,OAAQ,QACRC,SAAU,cAEZ,CACED,OAAQ,MACRC,SAAU,MACVK,OAAQ,SAAAC,GAAA,IAAGb,EAAHa,EAAGb,OAAQc,EAAXD,EAAWC,SAAX,OACN3C,EAAAC,EAAAC,cAAA,SACE0C,KAAK,QACLC,IAAI,KACJC,IAAI,IACJH,SAAU,SAAAI,GAAK,OAAIJ,EAASI,EAAMC,OAAOR,QACzCpC,MAAO,CAAE6C,MAAO,QAChBT,MAAOX,EAASA,EAAOW,MAAQ,UAIrC,CACEL,OAAQ,UACRC,SAAU,iBAId,OACEpC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACEC,YAAU,EACV3B,KAAMZ,KAAKI,MAAMC,MACjBiB,QAASA,EACTkB,gBAAiB,GACjBC,UAAU,gCA/EG/C,iECkBRgD,mLAfX,OACEtD,EAAAC,EAAAC,cAAA,OAAKmD,UAAU,OACbrD,EAAAC,EAAAC,cAACqD,EAAD,MACAvD,EAAAC,EAAAC,cAACsD,EAAAvD,EAAD,CAAWG,MAAO,CAACqD,UAAU,SAC3BzD,EAAAC,EAAAC,cAACwD,EAAAzD,EAAD,KACED,EAAAC,EAAAC,cAACyD,EAAA1D,EAAD,CAAK2D,GAAI,IACP5D,EAAAC,EAAAC,cAAC2D,EAAD,iBARIvD,aCEEwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,KAAK,SAAAsD,GACjCA,EAAaC","file":"static/js/main.127e865f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\nconst styles = {\n    nav : {\n        backgroundColor: \"#4977e3\",\n        flexGrow: 1\n    }\n}\n/* Stateless component for the navbar */\nconst Nav = () => {\n  return (\n    <Navbar style={styles.nav} expand=\"lg\">\n      <h2>Beer Magic!</h2>\n    </Navbar>\n  );\n};\nexport default Nav;\n","import React, { Component } from 'react';\n\n\nclass BeerItem extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {  \n            beerData: props.beerData\n        }\n\n    }\n    render() { \n        return ( \n            <tr>\n                <td></td>\n            </tr>\n\n         );\n    }\n}\n \nexport default BeerItem;","import React, { Component } from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport BeerItem from \"./BeerItem\";\nimport Row from \"react-bootstrap/Row\";\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\n\nclass BeerList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      beers: [],\n      breweries: []\n    };\n  }\n\n  componentDidMount() {\n    // Fetching the breweries from the mock API\n    fetch(\"data/breweries.json\")\n      .then(r => r.json())\n      .then(data => {\n        this.setState({ breweries: data });\n      });\n    // Fetching the breers from the mock API\n    fetch(\"data/beers.json\")\n      .then(r => r.json())\n      .then(data => {\n        data.map(item => {\n\n          // Mapping the beers with their breweries to avoid doing lookups later on.\n          let result = this.state.breweries.filter(brewery => {\n            return brewery.id === item.brewery_id;\n          })[0];\n\n          if (result != null) {\n            item[\"brewery_name\"] = result.name;\n          }\n        });\n        // Adding our dataset to the local state of this component.\n        this.setState({ beers: data });\n      });\n  }\n\n  render() {\n    // Setting up our columns for react-tables.\n    const columns = [\n      {\n        Header: \"id\",\n        accessor: \"id\"\n      },\n      {\n        Header: \"name\",\n        accessor: \"name\",\n        filterMethod: (filter, row) => row[filter.id].includes(filter.value)\n      },\n      {\n        Header: \"Style\",\n        accessor: \"style_name\"\n      },\n      {\n        Header: \"ABV\",\n        accessor: \"abv\",\n        Filter: ({ filter, onChange }) => (\n          <input\n            type=\"range\"\n            max=\"20\"\n            min=\"0\"\n            onChange={event => onChange(event.target.value)}\n            style={{ width: \"100%\" }}\n            value={filter ? filter.value : \"all\"}\n          />\n        )\n      },\n      {\n        Header: \"Brewery\",\n        accessor: \"brewery_name\"\n      }\n    ];\n\n    return (\n      <div>\n        <ReactTable\n          filterable\n          data={this.state.beers}\n          columns={columns}\n          defaultPageSize={10}\n          className=\"-striped -highlight\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default BeerList;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"./components/Nav\";\nimport Nav from \"./components/Nav\";\nimport BeerList from \"./components/BeerList\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Nav />\n        <Container style={{marginTop:\"30px\"}}>\n          <Row>\n            <Col md={12}>\n              <BeerList />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}